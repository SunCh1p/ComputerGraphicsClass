@startuml
title Pure ECS Architecture (Entity as ID)
class Globals {
  {static} MAX_COMPONENTS : ComponentType = 32
  {static} MAX_ENTITIES : EntityType = 5000
}


' Signature type: way to track which components an entity has
class Signature {
  bitset<MAX_COMPONENTS>
}

' Entity is just an id
class Entity {
    id : uint32_t
}

' Components
class ComponentType{
    id: uint8_t
}

class ConcreteComponent{
  some data stored in struct
}

ComponentType <|-- ConcreteComponent

'Entity manager is responsible for distributing entity ids and keeping a record of which are in use and what is not in use as well as registering what components they have
class EntityManager {
  - mAvailableEntities : queue<Entity>
  - mSignatures : array<Signature, MAX_ENTITIES>
  - mLivingEntityCount : uint32_t

  + EntityManager()
  + CreateEntity() : Entity
  + DestroyEntity(entity : Entity) : void
  + SetSignature(entity : Entity, signature : Signature) : void
  + GetSignature(entity : Entity) : Signature
}

EntityManager o-- Signature
EntityManager o-- Entity

'IComponentArray is needed to component manager can tell a generic component array that an entity has been destroyed
class  IComponentArray{
    +~IComponentArray() = default
    +EntityDestroyed(Entity entity) : void
}
'A component array will be associated with each component
class ComponentArray {
    +InsertData(entity: Entity, component: T) : void
    +RemoveData(entity: Entity) : void
    +GetData(entity: Entity): T&
    +EntityDestroyed(entity Entity) : void override
    -m_ComponentArray: array<T, MAX_ENTITIES>
    -m_EntityToIndexMap: unordered_map<Entity, size_t>
    -m_IndexToEntityMap: unordered_map<size_t, Entity> 
}

'Component Manager - talks to different component arrays when a component needs to be added or removed
class ComponentManager {
  - mComponentTypes : unordered_map<const char*, ComponentType>
  - mComponentArrays : unordered_map<const char*, shared_ptr<IComponentArray>>
  - mNextComponentType : ComponentType

  + RegisterComponent()
  + GetComponentType() : ComponentType
  + AddComponent>(entity : Entity, component : T)
  + RemoveComponent(entity : Entity)
  + GetComponent(entity : Entity) : T&
  + EntityDestroyed(entity : Entity)
  - GetComponentArray() : shared_ptr<ComponentArray>>
}

'System -> is any functionality that iterates upon a list of entities with a certain signature of components
'every system needs a list of entities, and we want some logic outside of the system in a form of a manager to maintain that list
'each system can inherit from this class for logic
class System{
  -mEntities: std::set<Entity>
}

'concrete system implements some kind of functionality for logic
class ConcreteSystem{
  
}

System o-- Entity : contains
System <|-- ConcreteSystem

'System Manager maintains a record of registered systems and their signatures
'When a system is registered, it's added to a map with the same typeid(T).name()
'Register system to build the system
'Each system needs to have a signatureset for ti so that the manager can add appropriate entities to each system's list of entities
class SystemManager{
  +RegisterSystem(): std::shared_ptr<T>
  +SetSignature(signature: Signature): void
  +EntityDestroyed(entity: Entity): void
  +EntitySignatureChanged(entity: Entity, entitySignature: Signature): void
  -mSignatures: unordered_map<const char*, Signature>
  -mSystems: unordered_map<const char*, std::shared_ptr<System>> mSystems
}

SystemManager o-- Signature
SystemManager --> System

'Single class dedicated to getting EntityManager, Component Manager, System Manager so they can talk to eachother
class World{
  +init(): void
  +CreateEntity(): Entity
  +DestroyEntity(): void 
  +RegisterComponent(): void
  +AddComponent(entity: Entity, T: component): void
  +RemoveComponent(entity: Entity): void
  +GetComponent(entity: Entity): T&
  +GetComponentType(): ComponentType 
  +RegisterSystem(): std::shared_ptr<T>
  +SetSystemSignature(signature Signature): void
  -mComponentManager: unique_ptr<ComponentManager>
  -mEntityManager: unique_ptr<EntityManager>
  -mSystemManager: unique_ptr<SystemManager>
}

World --> ComponentManager 
World --> EntityManager 
World --> SystemManager

'Component Array relationships
IComponentArray <|-- ComponentArray

'Component Manager relationshiops
ComponentManager --> ComponentType
ComponentManager --> IComponentArray
ComponentManager --> Entity

@enduml
